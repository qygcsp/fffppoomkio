# .github/workflows/android_kernel_ci.yml
name: Android Kernel CI

on:
  workflow_dispatch:

jobs:
  build-kernel:
    name: Build Android 9 Kernel
    runs-on: ubuntu-22.04
    env:
      ARCH: arm64
      SUBARCH: arm64
      CLANG_TRIPLE: aarch64-linux-gnu-
      CROSS_COMPILE: aarch64-linux-android-
      CROSS_COMPILE_ARM32: arm-linux-androideabi-

    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: qgzslm/ppoomkio
          ref: master

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              bc \
              bison \
              build-essential \
              clang-12 \
              cmake \
              flex \
              gcc-multilib \
              git \
              lib32z1 \
              libelf-dev \
              libncurses-dev \
              libssl-dev \
              lld-12 \
              llvm-12 \
              python2 \
              unzip \
              zlib1g-dev

      - name: Setup AOSP toolchain
        run: |
          # 下载Android NDK r20b
          wget -q https://dl.google.com/android/repository/android-ndk-r20b-linux-x86_64.zip
          unzip -q android-ndk-r20b-linux-x86_64.zip
          
          # 设置Clang工具链
          export CLANG_PATH=$(pwd)/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH
          
          # 设置GCC交叉编译工具链
          export GCC_PATH=$(pwd)/android-ndk-r20b/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin
          echo "CROSS_COMPILE=$GCC_PATH/aarch64-linux-android-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=$(pwd)/android-ndk-r20b/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-" >> $GITHUB_ENV

      - name: Clean previous build
        run: |
          make O=out clean
          rm -rf out/*

      - name: Build kernel
        run: |
          # 生成配置文件
          make O=out ARCH=$ARCH \
              CC="$CLANG_PATH/clang" \
              CLANG_TRIPLE=$CLANG_TRIPLE \
              CROSS_COMPILE="$CROSS_COMPILE" \
              CROSS_COMPILE_ARM32="$CROSS_COMPILE_ARM32" \
              msmcortex-NX563J-perf_defconfig

          # 完整编译
          make -j$(($(nproc)/2)) O=out ARCH=$ARCH \
              CC="$CLANG_PATH/clang" \
              CLANG_TRIPLE=$CLANG_TRIPLE \
              CROSS_COMPILE="$CROSS_COMPILE" \
              CROSS_COMPILE_ARM32="$CROSS_COMPILE_ARM32" \
              LD="$CLANG_PATH/ld.lld" \
              AR="$CLANG_PATH/llvm-ar" \
              NM="$CLANG_PATH/llvm-nm" \
              OBJCOPY="$CLANG_PATH/llvm-objcopy" \
              OBJDUMP="$CLANG_PATH/llvm-objdump" \
              STRIP="$CLANG_PATH/llvm-strip" \
              HOSTCC=clang-12 \
              HOSTCXX=clang++-12 \
              KCFLAGS="-Wno-error=unused-function -Wno-error=unused-variable"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image
