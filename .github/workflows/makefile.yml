# .github/workflows/android_kernel_build.yml
name: Android Kernel Builder

on:
  workflow_dispatch:

jobs:
  build:
    name: Kernel Build
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    
    env:
      ARCH: arm64
      KERNEL_DIR: ${{ github.workspace }}
      CLANG_VERSION: 12
      NDK_VERSION: r20b

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        repository: qgzslm/ppoomkio
        fetch-depth: 0

    - name: Setup environment
      run: |
        # 安装必要依赖
        sudo apt-get update
        sudo apt-get install -y \
            bc \
            bison \
            build-essential \
            clang-${CLANG_VERSION} \
            cmake \
            flex \
            gcc-multilib \
            lib32z1 \
            libelf-dev \
            libncurses5-dev \
            lld-${CLANG_VERSION} \
            llvm-${CLANG_VERSION} \
            python2 \
            unzip \
            zlib1g-dev

        # 创建符号链接解决python兼容问题
        sudo ln -sf /usr/bin/python2 /usr/bin/python

    - name: Setup NDK toolchain
      run: |
        # 下载并配置NDK
        wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux-x86_64.zip
        unzip -q android-ndk-${NDK_VERSION}-linux-x86_64.zip
        export NDK_PATH="$PWD/android-ndk-${NDK_VERSION}"

        # 设置工具链路径
        echo "CLANG_BIN=$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
        echo "GCC_BIN=$NDK_PATH/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
        
        # 更新PATH环境变量
        echo "$CLANG_BIN:$GCC_BIN" >> $GITHUB_PATH

    - name: Clean build directory
      run: |
        make O=out clean || true
        rm -rf out/

    - name: Apply code patches
      run: |
        # 修复字符串拼接类型警告
        sed -i 's/unsigned long arg, const char \*str/unsigned long arg, const char \*str, int base/g' \
            drivers/staging/android/uapi/ion.h
        
        # 修复宏展开警告
        find . -type f -name '*.c' -exec sed -i \
            's/#define \([A-Z_]*\)_MASK GENMASK(\(.*\))/static const u64 \1_MASK = GENMASK(\2);/g' {} +

    - name: Configure kernel
      run: |
        make O=out ARCH=${ARCH} \
            CC="$CLANG_BIN/clang" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE="$GCC_BIN/aarch64-linux-android-" \
            CROSS_COMPILE_ARM32="$NDK_PATH/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-" \
            msmcortex-NX563J-perf_defconfig

    - name: Build kernel
      run: |
        set -x
        make -j$(($(nproc)*3/4)) O=out ARCH=${ARCH} \
            CC="$CLANG_BIN/clang" \
            LD="$CLANG_BIN/ld.lld" \
            AR="$CLANG_BIN/llvm-ar" \
            NM="$CLANG_BIN/llvm-nm" \
            OBJCOPY="$CLANG_BIN/llvm-objcopy" \
            OBJDUMP="$CLANG_BIN/llvm-objdump" \
            STRIP="$CLANG_BIN/llvm-strip" \
            HOSTCC=clang-${CLANG_VERSION} \
            HOSTCXX=clang++-${CLANG_VERSION} \
            KCFLAGS="-Wno-error=unused-function \
                     -Wno-error=unused-variable \
                     -Wno-error=stringop-overflow \
                     -Wno-error=implicit-function-declaration" \
            CFLAGS_MODULE="-Wno-missing-prototypes"

    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: kernel-image
        path: out/arch/arm64/boot/Image
