# .github/workflows/android_kernel_ci.yml
name: Android 9 Kernel Builder

on:
  workflow_dispatch:

jobs:
  build-kernel:
    name: Build Kernel
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      ARCH: arm64
      NDK_VERSION: r20b
      KCFLAGS: "-Wno-error=array-bounds -Wno-error=stringop-overflow"

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        repository: qgzslm/ppoomkio
        fetch-depth: 0
        submodules: recursive  # 确保检出所有子模块

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
            bc \
            bison \
            build-essential \
            clang-12 \
            flex \
            lld-12 \
            llvm-12 \
            libncurses-dev \
            python2 \
            unzip
        
        # 修复Python兼容性
        sudo ln -sf /usr/bin/python2 /usr/bin/python

    - name: Download NDK (with retry)
      run: |
        for i in {1..3}; do
          wget https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux-x86_64.zip && break
          sleep $((i*10))
        done

    - name: Configure toolchains
      run: |
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux-x86_64.zip
        echo "CLANG_PATH=$PWD/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
        echo "GCC_PATH=$PWD/android-ndk-${{ env.NDK_VERSION }}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
        echo "$CLANG_PATH:$GCC_PATH" >> $GITHUB_PATH

    - name: Apply signal.h patch
      run: |
        # 修复数组越界核心问题
        sed -i 's/unsigned long sig\[_NSIG_WORDS\]/unsigned long sig[2]/g' \
            include/uapi/asm-generic/signal.h \
            include/linux/signal.h
        
        # 修改信号集操作宏
        sed -i 's/#define _NSIG_WORDS\s\+.*/#define _NSIG_WORDS 2/' \
            include/linux/signal.h
        
        # 修复case语句中的数组访问
        find . -name "signal.h" -exec sed -i \
            -e 's/case 2: set->sig\[1\]/case 2: if (_NSIG_WORDS > 1) set->sig[1]/g' \
            -e 's/\(sig\[0\] =\)/\1/g' {} +

    - name: Build kernel
      run: |
        set -x
        # 生成配置
        make O=out ARCH=$ARCH \
            CC="$CLANG_PATH/clang" \
            LD="$CLANG_PATH/ld.lld" \
            CROSS_COMPILE="$GCC_PATH/aarch64-linux-android-" \
            msmcortex-NX563J-perf_defconfig

        # 完整编译
        make -j$(($(nproc)*3/4)) O=out ARCH=$ARCH \
            CC="$CLANG_PATH/clang" \
            LD="$CLANG_PATH/ld.lld" \
            AR="$CLANG_PATH/llvm-ar" \
            NM="$CLANG_PATH/llvm-nm" \
            STRIP="$CLANG_PATH/llvm-strip" \
            KCFLAGS="$KCFLAGS" \
            CFLAGS_MODULE="-Wno-implicit-function-declaration"

    - name: Upload image
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: kernel-image
        path: out/arch/${{ env.ARCH }}/boot/Image
